#!/usr/bin/env python

import argparse
import sys

from packages.wiki_page_downloader.move_in_progress_pages_back_for_retry import move_in_progress_pages_back_for_retry
from packages.wiki_page_downloader.page_downloader import page_downloader, get_downloaded_page_markdown
from packages.wiki_page_downloader.upload_page_titles_for_downloading import upload_page_titles_for_downloading
from packages.wiki_page_downloader.create_dataset_from_downloaded_pages import create_dataset_from_downloaded_pages

task_choices = [
    'download',
    'upload_titles',
    'move_in_progress_pages_back_for_retry',
    'get_downloaded_page_markdown',
    'create_dataset'
]


def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(
        prog='wikipedia_page_downloading',
        description='Downloading Wikipedia pages to Firestore.',
    )

    parser.add_argument(
        'action',
        choices=task_choices,
        help=f"Specify the action to perform: {', '.join(task_choices)}"
    )

    parser.add_argument(
        '--batch_size',
        type=int, default=20,
        help="For download, specify how many pages to claim to download at once."
    )

    parser.add_argument(
        '--limit',
        type=int, default=0,
        help="For upload_titles, limit the number of titles to upload. 0 means no limit."
    )

    parser.add_argument(
        '--base64_title',
        default="",
        help="For get_downloaded_page_markdown."
    )

    parser.add_argument(
        '--dataset_name',
        default="",
        help="For create_dataset."
    )

    args = parser.parse_args(argv)

    if args.action == 'download':
        if args.batch_size < 1:
            print("Batch size must be greater than 0. Exiting.")
            sys.exit(1)

        page_downloader(batch_size=args.batch_size)

    elif args.action == 'upload_titles':
        if args.limit < 0:
            print("Limit must be greater than or equal to 0. Exiting.")
            sys.exit(1)

        upload_page_titles_for_downloading(limit=args.limit)

    elif args.action == 'move_in_progress_pages_back_for_retry':
        move_in_progress_pages_back_for_retry()

    elif args.action == 'get_downloaded_page_markdown':
        print(get_downloaded_page_markdown(args.base64_title))

    elif args.action == 'create_dataset':
        if args.dataset_name == "":
            print("--dataset_name must be provided.")
            sys.exit(1)
        create_dataset_from_downloaded_pages(args.dataset_name)


if __name__ == "__main__":
    main()
